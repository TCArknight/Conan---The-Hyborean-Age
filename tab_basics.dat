<?xml version="1.0" encoding="UTF-8"?>

<!-- This file contains the definition of the "Basics" tab panel. This tab is where
      the user configures that attributes and skills of the character.

      All public visual elements used with this tab panel start with the prefix "ba"
      to associate them with the tab.
-->

<document signature="Hero Lab Data">

  <portal
    id="baOrigin"
    style="chsNormal"
    width="110">
    <chooser_table
      component="Origin"
      choosetemplate="LargeItem">
      <chosen><![CDATA[
        if (@ispick = 0) then
          @text = "{text clrwarning}Select Origin"
        else
          @text = "Origin: " & field[name].text
          endif
        ]]></chosen>
      <titlebar><![CDATA[
        @text = "Choose the origin for your character"
        ]]></titlebar>
      </chooser_table>
    </portal>
	
  <!-- baAttrib portal
        Presents a fixed table that consists of the various attributes for the
        character. The "explicit" sortset is used to enforce a hand-numbered
        ordering of the attributes. Since the full list is short enough to always
        be visible, the table has no scroller.

        We use a "headertitle" script to place a suitable title above the table.
  -->
  <portal
    id="baAttrib"
    style="tblInvis">
    <table_fixed
      component="Attribute"
      showtemplate="baAttrPick"
      showsortset="explicit"
      scrollable="no"
	  >
      <headertitle><![CDATA[
        @text = "Attributes: " & hero.child[resAttribute].field[resSummary].text
        ]]></headertitle>
      </table_fixed>
    </portal>

  <!-- baSkill portal
        Presents a dynamic table where the user can add skills for the
        character.

        We use the "SimpleItem" template for selecting the special abilities, since
        all we need is basic information. We use a custom template for showing the
        selected abilities to highlight auto-added picks based on race selections.
        In conjunction with this, the "fixedlast" attribute forces all non-deletable
        picks (i.e. those that are auto-added) to be shown at the bottom of the list.

        We use an "additem" script to highlight whether more abilities need to be
        selected. This requires that we specify the "addthing" referenced in the
        script, which is the resource for tracking abilities.

        We use a "candidate" tag expression to limit the choices the user can make.
        If omitted, all things derived from the "Ability" component will be shown
        to the user for selection. Using this tagexpr allows us to omit all abilities
        that have the "Hide.Ability" tag. For example, the Flight ability needs to
        behave as a normal ability, but we only want it available to characters that
        select the "Avian" race. By assigning it the "Hide.Ability" tag and using
        the candidate tagexpr to omit those abilities, Flight cannot be chosen by
        non-Avian characters but it will also appear in the selected list if the
        character choosed the Avian race.

        We use a "titlebar" script to replace the default title on the choose form
        with something more useful. Just like we did on the title portal above, we
        include the summary information as helpful feedback to the user.

        We use a "description" script to generate the appropriate information for
        display to the user as a description when choosing special abilities. We
        call a general procedure for the game system for this purpose.

        We use a "headertitle" script to place a suitable title above the table.
        The title includes an indication of how many selections have been chosen
        and how many remain, with appropriate color highlighting to prompt the user.
  -->
  <portal
    id="baSkill"
    style="tblNormal">
    <table_dynamic
      component="Skill"
      showtemplate="baSklPick"
      choosetemplate="baSkillThing"
	  choosesortset="SkillByXPCost"
	  candidatepick="SkillHelper"
	  candidatefield="ehExp"
      showfixedlast="yes"
      addpick="resXP">
      <titlebar><![CDATA[
        @text = "Add a Skill - " & hero.child[resXP].field[resSummary].text
        ]]></titlebar>
      <description/>
      <headertitle><![CDATA[
        @text = hero.child[SkillHelper].field[ehHdr].text
        ]]></headertitle>
      <additem><![CDATA[
        ~if we're in advancement mode, we've been frozen, so display accordingly
        if (state.iscreate = 0) then
          @text = "{text clrgrey}Add Skills Via Advances Tab"
          done
          endif

        ~set the color based on whether the proper number of slots are allocated
        if (field[resLeft].value = 0) then
          @text = "{text clrgrey}"
        elseif (field[resLeft].value < 0) then
          @text = "{text clrwarning}"
          endif
        @text &= "Add New Skill"
        ]]></additem>
      </table_dynamic>
    </portal>


  <!-- baTrait portal
        Presents a fixed table with all derived traits in it. The sortset allows
        us to dictate the order of display via a hand-numbered sequence. All traits
        are always visible, so we don't need a scroller.
  -->
  <portal
    id="baTrait"
    style="tblInvis">
    <table_fixed
      component="Derived"
      showtemplate="baTrtPick"
      showsortset="explicit"
      scrollable="no">
	  <list>!Hide.Trait</list>
      <headertitle><![CDATA[
        @text = "Derived Traits"
        ]]></headertitle>
      </table_fixed>
    </portal>

  <portal
    id="baOriginAbility"
    style="tblNormal">
    <table_fixed
      component="OriginAbility"
      showtemplate="baAbilPick"
      showfixedlast="yes">
      <list><![CDATA[ component.OriginAbility & !Hide.Ability ]]></list>
      <headertitle><![CDATA[
        @text = "Origin Abilities"
        ]]></headertitle>
      </table_fixed>
    </portal>

  <!-- baAttrPick template
        Displays one attribute within the table of attributes. We setup suitable
        margins around each template, which provides substantial spacing between
        each item and the edges of the table. Each attribute consists of its name,
        an incrementer where the user can assign the value, and an info button that
        provides details on the attribute when the user moves the mouse over it.
  -->
  <template
    id="baAttrPick"
    name="Attribute Pick"
    compset="Attribute"
    marginhorz="13"
    marginvert="9">

    <portal
      id="name"
      style="lblXLarge"
      showinvalid="yes">
      <label
        field="name">
        </label>
      </portal>

    <portal
      id="value"
      style="incrSimple">
      <incrementer
        field="trtUser">
        </incrementer>
      <mouseinfo><![CDATA[
        if (hero.tagis[mode.creation] = 0) then
          @text = "Attributes must be modified via the Advances tab once the character is locked for play."
        elseif (autonomous = 0) then
          @text = "This trait has been improved via the Advances tab and cannot be modified further from here."
        else
          @text = "Allocate points to this attribute by clicking on the arrows to increase/decrease the number of points assigned."
          endif
        ]]></mouseinfo>
      </portal>

    <portal
      id="dievalue"
      style="lblXLarge"
      showinvalid="yes">
      <label
        field="trtDisplayDieType">
        </label>
      </portal>

    <portal
      id="info"
      style="actInfo">
      <action
        action="info">
        </action>
      </portal>

    <position><![CDATA[
      ~set up our height based on our tallest portal
      height = portal[info].height

      ~if this is a "sizing" calculation, we're done
      doneif (issizing <> 0)

      ~freeze our value in advancement mode or if an advancement has modified us
      ~Note: All freezing must be done *before* any positioning is performed.
      if (state.iscreate = 0) then
        portal[value].freeze = 1
      elseif (autonomous = 0) then
        portal[value].freeze = 1
        endif

      ~position our tallest portal at the top
      portal[info].top = 0

      ~center the other portals vertically
      perform portal[name].centervert
      perform portal[value].centervert
      perform portal[dievalue].centervert

      ~position the info portal on the far right
      perform portal[info].alignedge[right,0]
	  
      ~position the die value to the left of the info portal (plus a gap)
      perform portal[dievalue].alignrel[rtol,info,-10]
	  portal[dievalue].visible = tagis[User.ShowDieValue]

      ~position the incrementer to the left of the dievalue portal (plus a gap)
      perform portal[value].alignrel[rtol,dievalue,-10]
	  portal[value].visible = tagis[User.ShowValue]

      ~position the name on the left and make sure its width does not exceed the available space
      portal[name].left = 0
      portal[name].width = minimum(portal[name].width,portal[value].left - portal[name].left - 10)
      ]]></position>

    </template>


  <!-- baSklPick template
        Displays one skill within the table of skills. This template is very
        similar to the one used for attributes. The key differences are that this
        template is tied to skills and has slightly different margins for closer
        grouping of the items in the table.
  -->
  <template
    id="baSklPick"
    name="Skill Pick"
    compset="Skill"
    marginhorz="23"
    marginvert="3">

    <portal
      id="name"
      style="lblLeft"
      showinvalid="yes">
      <label
        field="name">
        </label>
      </portal>

    <portal
      id="summary"
      style="lblDisableLeftSm"
      showinvalid="yes">
      <label
        field="summary"
		ismultiline="yes">
        </label>
      </portal>
		
    <portal
      id="info"
      style="actInfo">
      <action
        action="info">
        </action>
      </portal>

    <portal
      id="delete"
      style="actDelete"
      tiptext="Click to delete this item">
      <action
        action="delete">
        </action>
      </portal>

    <position><![CDATA[
      ~set up our height based on our tallest portal
      height = portal[name].height + portal[summary].fontheight * 5
      height = portal[info].height

      ~position our tallest portal at the top and center other portals on it
      portal[info].top = 0
      perform portal[name].centeron[vert,info]
      perform portal[delete].centeron[vert,info]

      ~position the recap portal beneath the top line and limit it to 3 lines
      ~perform portal[summary].alignrel[ttob,name,3]
      ~portal[summary].lineheight = 5

      ~position the delete and info portals on the far right
      perform portal[delete].alignedge[right,0]
      perform portal[info].alignrel[rtol,delete,-8]

      ~position the name on the left and make sure its width does not exceed the available space
      portal[name].left = 0
      portal[name].width = minimum(portal[name].width,portal[info].left - portal[name].left - 4)
	  
	  ~position and size the recap horizontally
      ~perform portal[summary].alignrel[ltol,name,0]
      ~portal[summary].width = portal[delete].left - 10 - portal[summary].left

      ~resize the contents of the recap portal if needed and ensure a 3-line height
      ~perform portal[summary].sizetofit[25]
      ~portal[summary].lineheight = 5
	  portal[summary].visible = 0
	  
      ~if the ability is auto-added, change its font to indicate that fact
      if (candelete = 0) then
        perform portal[name].setstyle[lblAuto]
        endif
      ]]></position>

    </template>


  <template
    id="baSkillThing"
    name="Skill Thing"
    compset="Skill"
    marginhorz="23"
    marginvert="3">

    <portal
      id="name"
      style="lblLeft"
      showinvalid="yes">
      <label
        field="name">
        </label>
      </portal>

    <portal
      id="xpcost"
      style="lblDisable">
      <label
        field="sklXPCost">
        </label>
      </portal>

    <position><![CDATA[
      ~set up our height based on our tallest portal
      height = portal[name].height

      ~if this is a "sizing" calculation, we're done
      doneif (issizing <> 0)

      ~position our tallest portal at the top
      portal[name].top = 0

      ~center the other portals vertically
      perform portal[xpcost].centervert

      ~position the delete and info portals on the far right
      perform portal[xpcost].alignedge[right,0]

      ~position the name on the left and make sure its width does not exceed the available space
      portal[name].left = 0
      portal[name].width = minimum(portal[name].width,portal[xpcost].left - portal[name].left - 4)
	  
      ~center the name if requested or this is a show-only thing
      if (tagis[SimpleItem.CenterName] + tagis[thing.showonly] <> 0) then
        perform portal[name].centerhorz
		portal[xpcost].visible = 0
        endif
		
      ]]></position>

    </template>
	
  <!-- baTrtPick template
        Displays one trait within the table of traits. The trait name is shown on
        the left, with appropriate details about the derived value on the right.
        At the right edge is an info button that can be moused over for more info.
        As with the other templates above, we use the margins to establish good
        visual spacing between and around the items in the table.
  -->
  <template
    id="baTrtPick"
    name="Trait Pick"
    compset="Trait"
    marginhorz="16"
    marginvert="3">

    <portal
      id="name"
      style="lblLeft"
      showinvalid="yes">
      <label>
        <labeltext><![CDATA[
          @text = field[name].text & ":"
          ]]></labeltext>
        </label>
      </portal>

    <portal
      id="details"
      style="lblLeft">
      <label>
        <labeltext><![CDATA[
		  var myValue as string
		  myValue = ""
		  if (tagis[User.ShowValue] <> 0) then
            myValue = field[trtFinal].text
		    endif
		  
		  if (tagis[User.ShowDieValue] <> 0) then
		    myValue = splice(myValue, field[trtDisplayDieType].text,"  ")
			endif
			
		  @text = myValue
          ]]></labeltext>
        </label>
      <mouseinfo><![CDATA[
        ~insert appropriate code to explain how the trait was derived
        @text = "???"
        ]]></mouseinfo>
      </portal>

    <portal
      id="info"
      style="actInfo">
      <action
        action="info">
        </action>
      </portal>

    <position><![CDATA[
      ~set up our height based on our tallest portal
      height = portal[info].height

      ~if this is a "sizing" calculation, we're done
      doneif (issizing <> 0)

      ~position our tallest portal at the top
      portal[info].top = 0

      ~center the other portals vertically
      perform portal[name].centervert
      perform portal[details].centervert

      ~position the info portal on the far right
      perform portal[info].alignedge[right,0]

      ~position the name on the left and give it some reasonable space
      portal[name].left = 0
      portal[name].width = 135

      ~position the details to the right of the name and the left of the info portal
      perform portal[details].alignrel[ltor,name,10]
      portal[details].width = portal[info].left - portal[details].left - 10
      ]]></position>

    </template>


  <!-- abPick template
        Displays the name of the pick/thing and an info button with the basic
        description text. This is basically the "SimpleItem" template, with one
        key difference. Auto-added abilities such as those conferred by races are
        sorted and colored differently to distinguish their nature.
  -->
  <template
    id="baAbilPick"
    name="Ability Pick"
    compset="Ability"
    marginhorz="3"
    marginvert="2">

    <portal
      id="name"
      style="lblNormal"
      showinvalid="yes">
      <label
        field="name">
        </label>
      </portal>

    <portal
      id="info"
      style="actInfo">
      <action
        action="info">
        </action>
      <mouseinfo/>
      </portal>

    <portal
      id="delete"
      style="actDelete"
      tiptext="Click to delete this item">
      <action
        action="delete">
        </action>
      </portal>

    <position><![CDATA[
      ~set up our height based on our tallest portal
      height = portal[info].height

      ~if this is a "sizing" calculation, we're done
      doneif (issizing <> 0)

      ~position our tallest portal at the top
      portal[info].top = 0

      ~center the other portals vertically
      perform portal[name].centervert
      perform portal[delete].centervert

      ~position the delete portal on the far right
      perform portal[delete].alignedge[right,0]

      ~position the info portal to the left of the delete button
      perform portal[info].alignrel[rtol,delete,-8]

      ~position the name on the left and let it use all available space
      portal[name].left = 0
      portal[name].width = minimum(portal[name].width,portal[info].left - 5)

      ~if the ability is auto-added, change its font to indicate that fact
      if (candelete = 0) then
        perform portal[name].setstyle[lblAuto]
        endif
      ]]></position>

    </template>


  <!-- basics layout
        This layout orchestrates the display of all various visual elements that
        comprise the Basics tab. We have titles above the attributes and skills,
        the attributes and skills tables themselves, a horizontal separator, and
        the table of derived traits.

        Each of these portals and templates is identified as a "reference" by the
        layout. Using references allows distinct instances of portals and templates
        to be re-used within multiple layouts. You can even use the same template
        multiple times within a single layout.

        The visual elements used in the layout are all sized and positioned via
        the "position" script. This script is invoked to setup the dimensions of
        visual elements and trigger the positioning of the contents of those
        elements via the "render" invocation.

        The tab order between items is controlled via the optional "taborder" XML
        attribute on the various portal and template references. Within a template,
        the tab order is dictated by the order the portals are listed within the
        XML. Within a table, the tab order is dictated by the item sequence. The
        "taborder" attribute coordinates the relative sequence of portals and
        templates within the layout. In this layout, the tab order will move down
        the left column and then shift over to the right column.
  -->
  <layout
    id="basics">
    <portalref portal="baOrigin" taborder="10"/>
    <portalref portal="baAttrib" taborder="20"/>
    <portalref portal="baTrait" taborder="30"/>
    <portalref portal="baOriginAbility" />
    <portalref portal="baSkill" taborder="40"/>
    <portalref portal="Horizontal"/>

    <!-- This script sizes and positions the layout and its child visual elements. -->
    <position><![CDATA[
	  ~size and position the attributes table in the top left; we set the height to
      ~the full layout height, but the table will only use the space it needs
      portal[baOrigin].width = width/2 - 5
      portal[baOrigin].left = 0
      portal[baOrigin].height = 25
	  
      ~size and position the attributes table in the top left; we set the height to
      ~the full layout height, but the table will only use the space it needs
      portal[baAttrib].width = portal[baOrigin].width
      portal[baAttrib].left = portal[baOrigin].left
      portal[baAttrib].top = portal[baOrigin].bottom + 5
      portal[baAttrib].height = height

      ~size and position the traits table beneath the separator; we set the height
      ~the the full layout height, but the table will only use the space it needs
      portal[baTrait].width = portal[baAttrib].width
      portal[baTrait].left = width - portal[baTrait].width
      portal[baTrait].top = portal[baAttrib].top
      portal[baTrait].height = height

      ~set the separator width and position it beneath the attributes
      portal[Horizontal].width = width - 20
      portal[Horizontal].top = maximum(portal[baAttrib].bottom,portal[baTrait].bottom) + 15
      portal[Horizontal].left = 10

      ~size and position the skills table in the top right; we set the height to
      ~the full layout height, but the table will only use the space it needs
      portal[baOriginAbility].width = width - 10
	  portal[baOriginAbility].top = portal[Horizontal].bottom + 10
      portal[baOriginAbility].left = 5
      portal[baOriginAbility].height = height - portal[baOriginAbility].top
	  
      ~size and position the skills table in the top right; we set the height to
      ~the full layout height, but the table will only use the space it needs
      portal[baSkill].width = width - 10
	  portal[baSkill].top = portal[baOriginAbility].bottom + 10
      portal[baSkill].left = 5
      portal[baSkill].height = height - portal[baSkill].top
	  portal[baSkill].visible = 1
	  
      ~figure out the total height we need for the tab
      height = maximum(portal[baTrait].bottom, portal[baSkill].bottom)
      ]]></position>

    </layout>


  <!-- basics panel
        This is the "Basics" panel shown within Hero Lab.

        The "order" attribute dictates the sequence in which the various tabs will
        be displayed. To keep everything well organized, We break the tabs up into
        four logical groupings: (1) traits and creation details, (2) equipment,
        (3) details, and (4) in-play support. Each of these groupings will have a
        three-digit value that starts with the grouping number. Since the Basics
        panel should appear first within the traits group, it has an order of "110".

        As we assign order values, We'll leave gaps in the sequence (e.g. 110, 120,
        etc.). This will allow us to easily change our minds and slip a new panel
        inbetween two existing ones as the data files evolve, without having to go
        through and re-number everything.

        We setup a suitable margin around the edges of the panel. This ensures that
        there is a little bit of spacing from the edges and eliminates the need for
        our positioning scripts to make the appropriate adjustments.

        Like with layouts, panels have a "position" script to setup the dimensions
        of child elements and orchestrate the rendering of their contents. In many
        cases, as with this panel, the default handling of panels will ensure that
        the layouts are properly rendered.

        The panel is assigned a "live" tagexpr so that its visibility can be
        controlled for different types of characters. While not really useful in the
        sample data files, this approach can be quite useful when the data files
        expand to govern creation of widely varying characters, such as vampires vs.
        ghosts vs. mortals in the World of Darkness game system.
  -->
  <panel
    id="basics"
    name="Basics"
    marginhorz="5"
    marginvert="5"
    order="110">
    <live>!HideTab.basics</live>
    <layoutref layout="basics"/>
    <position><![CDATA[
      ~get the height used by the layout and use it, as that means we scroll
      ~if necessary
      perform layout[basics].render
      height = layout[basics].height
      ]]></position>
    </panel>


  </document>
